"""Add created_at, updated_at, and user_type

Revision ID: 53176f4797b6
Revises: 9d89a07d0954
Create Date: 2025-07-17 18:13:00.939960

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '53176f4797b6'
down_revision: Union[str, Sequence[str], None] = '9d89a07d0954'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Add created_at and updated_at to slab_details
    op.add_column('slab_details', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('slab_details', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))

    # --- FIX for slab_details.colors ---
    # Assuming 'colors' should be NOT NULL with a default empty array []
    # 1. Update any existing NULLs to empty arrays
    op.execute("UPDATE slab_details SET colors = ARRAY[]::varchar[] WHERE colors IS NULL;")
    # 2. Alter the column to be NOT NULL with a server default for new rows
    op.alter_column('slab_details', 'colors',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False, # Changed from True to False
               server_default=sa.text("'{}'")) # Added server_default for consistency with model
    # --- END FIX ---

    op.create_index(op.f('ix_slab_details_id'), 'slab_details', ['id'], unique=False)
    
    # --- FIX for foreign key (ondelete='CASCADE') ---
    # Drop existing foreign key. Using op.f() relies on Alembic's naming convention, 
    # if it's still causing issues, replace 'fk_parent_slab_id' with the actual constraint name from your DB.
    op.drop_constraint('fk_parent_slab_id', 'slab_details', type_='foreignkey') 
    # Re-create foreign key with CASCADE delete behavior
    op.create_foreign_key(None, 'slab_details', 'slabs', ['parent_id'], ['id'], ondelete='CASCADE') # Added ondelete='CASCADE'
    # --- END FIX ---

    # Add created_at and updated_at to slabs
    op.add_column('slabs', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('slabs', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.create_index(op.f('ix_slabs_id'), 'slabs', ['id'], unique=False)

    # Add created_at, updated_at, and user_type to users
    op.add_column('users', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    
    # --- CRITICAL FIX for users.user_type ---
    # 1. Define the ENUM type for PostgreSQL (MUST be done BEFORE adding column)
    user_type_enum = postgresql.ENUM('USER', 'DESIGNER', 'ARCHITECT', 'SUPERADMIN', 'DISTRIBUTOR', name='user_type', create_type=False)
    user_type_enum.create(op.get_bind()) # This command creates the ENUM type in the DB

    # 2. Add the column, referencing the now-created ENUM type, with corrected server_default
    # Ensure 'USER' is also added to your UserType enum in models/user.py if this is desired
    op.add_column('users', sa.Column('user_type', user_type_enum, server_default=sa.text("'USER'"), nullable=False)) 
    # --- END CRITICAL FIX ---
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop user_type column
    op.drop_column('users', 'user_type')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')

    op.drop_index(op.f('ix_slabs_id'), table_name='slabs')
    op.drop_column('slabs', 'updated_at')
    op.drop_column('slabs', 'created_at')

    # Revert foreign key (re-add with CASCADE as it was added in upgrade)
    # Using specific constraint name from DB if you know it, e.g., 'slab_details_parent_id_fkey'
    # 'None' in drop_constraint matches the 'None' used in create_foreign_key in upgrade
    op.drop_constraint(None, 'slab_details', type_='foreignkey') 
    # Restore original foreign key (ensure this matches the state before this migration)
    op.create_foreign_key(op.f('fk_parent_slab_id'), 'slab_details', 'slabs', ['parent_id'], ['id'], ondelete='CASCADE') 

    op.drop_index(op.f('ix_slab_details_id'), table_name='slab_details')

    # --- REVERT FIX for slab_details.colors ---
    # Revert colors column to original state (assuming it was nullable=False but maybe without server_default)
    op.alter_column('slab_details', 'colors',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False, # Revert to NOT NULL based on original model intent
               server_default=None) # Remove server_default if it wasn't there originally, or set to your original
    # --- END REVERT FIX ---

    op.drop_column('slab_details', 'updated_at')
    op.drop_column('slab_details', 'created_at')

    # --- CRITICAL: Drop the ENUM type from the database ---
    # This must be done AFTER columns using it are dropped.
    postgresql.ENUM('USER', 'DESIGNER', 'ARCHITECT', 'SUPERADMIN', 'DISTRIBUTOR', name='user_type', create_type=False).drop(op.get_bind())
    # --- END CRITICAL ---
    # ### end Alembic commands ###